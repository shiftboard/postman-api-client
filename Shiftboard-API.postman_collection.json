{
	"info": {
		"_postman_id": "5a73de1d-b01a-4f2d-9fa9-64b608e857e6",
		"name": "Shiftboard API",
		"description": "This is a Postman collection for interacting with the API service for\n[Shiftboard](https://shiftboard.com). The collection may be used directly, or as an example for\ndeveloping custom code using data from Shiftboard.\n\nTo make use of the script you will need an active account on [Shiftboard](https://shiftboard.com),\nan API Access Key, and Signature Key enabled in your account.\n\nFor more information on the Shiftboard APIs, see the [documentation](http://www.shiftdata.com).\n\n\n## Instructions\n\n0. Import this collection (*Shiftboard-API.postman_collection.json*) into your workspace\n1. Select a request in the collection, or create a new one\n2. Set the URI to **{\\{shiftboardUriToken}}**\n3. Fill out `method` with the Shiftboard API method you are using, e.g., **account.get**\n4. Fill out `params` *(optional)*, e.g. **{\"id\":108}**\n5. Select an HTTP method, either `GET` or `POST`.\n  * For `POST` requests, set the request *Body* to **{\\{postData}}**\n6. Set your *Environment* (see below)\n7. Hit *Send*\n\n\n## Environment\n\nTo use these requests, you must have an *Environment* with three keys and values:\n\n* `accessKeyId` - your unique API key from Shiftboard\n* `secretKey` - your secret key from Shiftboard\n* `shiftboardUri` - the URI for the API, e.g.:\n  * Shiftboard in U.S. / Canada: **https://api.shiftdata.com/**\n  * Shiftboard in E.U.: **https://api-data.eu.shiftboard.com/**\n\n\n## Technical Notes\n\nEach request uses the *Pre-request Script* in the collection to manage packaging up the request. It adds additional query parameters, encodes the `params`, does authentication, signs the request, and so on.\n\n### LICENSE\n\nMIT\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "system.echo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=system.echo&params={\"foo\":\"bar\"}",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "system.echo"
						},
						{
							"key": "params",
							"value": "{\"foo\":\"bar\"}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "account.self",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=account.self&params={\"extended\":true,\"user_actions\":true}",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "account.self"
						},
						{
							"key": "params",
							"value": "{\"extended\":true,\"user_actions\":true}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "account.list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=account.list&params={\"page\": {\"batch\": 3, \"start\": 17 } }",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "account.list"
						},
						{
							"key": "params",
							"value": "{\"page\": {\"batch\": 3, \"start\": 17 } }"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "timeOffRequest.approve",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=timeOffRequest.approve&params={ \"id\": 1, \"status_reason\": \"good behavior\" }",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "timeOffRequest.approve"
						},
						{
							"key": "params",
							"value": "{ \"id\": 1, \"status_reason\": \"good behavior\" }"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "timeOffRequest.get",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=timeOffRequest.get&params={ \"id\": 1 }",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "timeOffRequest.get"
						},
						{
							"key": "params",
							"value": "{ \"id\": 1 }"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "timeOffRequest.deny",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=timeOffRequest.deny&params={ \"id\": 1, \"status_reason\": \"bad behavior\" }",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "timeOffRequest.deny"
						},
						{
							"key": "params",
							"value": "{ \"id\": 1, \"status_reason\": \"bad behavior\" }"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "timeOffRequest.update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=timeOffRequest.update&params={ \"id\": 1, \"status_reason\": \"good behavior\", \"status\": 2 }",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "timeOffRequest.update"
						},
						{
							"key": "params",
							"value": "{ \"id\": 1, \"status_reason\": \"good behavior\", \"status\": 2 }"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "timeOffRequest.list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{postData}}"
				},
				"url": {
					"raw": "{{shiftboardUri}}?method=timeOffRequest.list",
					"host": [
						"{{shiftboardUri}}"
					],
					"query": [
						{
							"key": "method",
							"value": "timeOffRequest.list"
						},
						{
							"key": "params",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var accessKeyID = pm.environment.get('accessKeyID');",
					"var secretKey = pm.environment.get('secretKey');",
					"",
					"var CryptoJS = require('crypto-js');",
					"",
					"const query = pm.request.url.query;",
					"const apiMethod = query.find(x => x.key == 'method').value;",
					"fixBadParams(query);",
					"const params = query.find(x => x.key == 'params').value;",
					"",
					"var shaData, queryString;",
					"",
					"if (request.method == 'POST') {",
					"    var postData = JSON.stringify({ 'id': 1, 'jsonrpc': '2.0', 'method': apiMethod, 'params': JSON.parse(params) })",
					"    shaData = postData;",
					"    pm.globals.set('postData', postData);",
					"    queryString = 'access_key_id=' + encodeURIComponent(accessKeyID);",
					"}",
					"else if (request.method == 'GET') {",
					"    pm.request.url.addQueryParams('access_key_id=' + encodeURIComponent(accessKeyID));",
					"    pm.request.url.addQueryParams('jsonrpc=2.0');",
					"    pm.request.url.addQueryParams('id=1');",
					"",
					"    queryString = query.filter(x => !x.disabled).map(x => x.key + '=' + encodeURIComponent(x.key == 'params' ? btoa(params) : x.value )).join('&');",
					"    shaData = 'method' + apiMethod + 'params' + params;",
					"}",
					"",
					"var signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA1(shaData, secretKey));",
					"queryString += '&signature=' + encodeURIComponent(signature);",
					"",
					"pm.request.url.query = queryString;",
					"",
					"// handle missing / disabled / empty params",
					"function fixBadParams(query) {",
					"    // if missing, add",
					"    if (!query.find(x => x.key == 'params')) {",
					"        pm.request.url.addQueryParams('params={}');",
					"    }",
					"    var qParams = query.find(x => x.key == 'params');",
					"    // if disabled, enable but make it empty",
					"    if (qParams.disabled) {",
					"        qParams.value = '{}';",
					"        qParams.disabled = false;",
					"    }",
					"    // if no value, give default value",
					"    else if (!qParams.value) {",
					"        qParams.value = '{}';",
					"    }",
					"}",
					"",
					"function btoa(str) {",
					"    var buffer;",
					"",
					"    if (str instanceof Buffer) {",
					"        buffer = str;",
					"    } else {",
					"        buffer = Buffer.from(str.toString(), 'binary');",
					"    }",
					"",
					"    return buffer.toString('base64');",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}